<?php

namespace AppBundle\Controller;

use AppBundle\Entity\News;
use AppBundle\Entity\User;
use AppBundle\Form\NewsShareType;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use AppBundle\Manager\UserManager;
use FOS\UserBundle\Event\FilterUserResponseEvent;
use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\Event\GetResponseUserEvent;
use FOS\UserBundle\Form\Factory\FactoryInterface;
use FOS\UserBundle\FOSUserEvents;
use FOS\UserBundle\Model\UserManagerInterface;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
class NewsShareController extends Controller
{
    /**
     * @Route("/news/share", name="news-share")
     */
    public function ShareNewsAction(Request $request)
    {
        $news=new News();
        $user=new User();
        $form = $this->createForm(new NewsShareType(), $news);
        $form->handleRequest($request);
        $id=$user->getId();
        $title=$news->getTitle();
        $subject=$news->getSubject();
        $content=$news->getContent();
        $image=$news->getImage();
        /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
        $file = $user->getProfImage();
        if($file) {
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('brochures_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $user->setProfImage($fileName);

            // ... persist the $product variable or any other work

        }
        $news->setAddedTime(new \DateTime());
        $news->setAuthorID($id);
        $news->setPublicStatus("0");
        $news->setNewsRating("0");

        return $this->render('AppBundle::news_share.html.twig', [
            'form' => $form->createView()
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
